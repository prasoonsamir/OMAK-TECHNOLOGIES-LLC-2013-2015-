'Main program to track water-oil flood front movement in a water-drive rectangle
'*************************************************************************************************************
Sub areasweep()
Dim xa(5000), ya(5000), x(500), y(500), dtd(5000), orgx, orgy, dt, ti, degree, angle2, areaperc
'Input reading from the excel sheet3
'--------------------------------------------------------------------------------------------------------
area = 0
Angle1 = 45 * (3.14 / 180)
angle2 = 45 * (3.14 / 180)
thk = Worksheets("Sheet2").Cells(3, 6).Value 'thickness of the formation
phi = Worksheets("Sheet2").Cells(4, 6).Value
bx = Worksheets("Sheet2").Cells(5, 6).Value
by = Worksheets("Sheet2").Cells(6, 6).Value
td = Worksheets("Sheet2").Cells(7, 6).Value 'td is the dimensionless time at which flood front location is desired
ns = Worksheets("Sheet2").Cells(11, 6).Value 'ns is the no. of fluid particles positions at cp-boundary considered to form a flood front
visc = Worksheets("Sheet2").Cells(2, 12).Value 'viscosity of the water
perm = Worksheets("Sheet2").Cells(3, 12).Value ' permeability of the formation
comp = Worksheets("Sheet2").Cells(4, 12).Value ' compressibility of the formation
For i = 1 To 2
wx(i) = Worksheets("Sheet2").Cells(8, 5 + i).Value 'X-coordinates of the wells (including image wells) in a closed rectangle
wy(i) = Worksheets("Sheet2").Cells(9, 5 + i).Value 'Y-coordinates of the wells(including image wells)in a closed rectangle
q(i) = Worksheets("Sheet2").Cells(10, 5 + i).Value 'Production rates of the actual and image wells in a closed rectangle
Next i

stsize = 10  'Initial distance step size selected for computation. Step size2 gives the minimum error
'Loop to track the fluid particle position of particular streamline (500+x) at time td
degree = 90 / (ns - 1) * (3.14 / 180)
For j = 1 To ns
i = 1
xa(i) = wx(2) + 1 * Cos(Angle1)
ya(i) = wy(2) + 1 * Sin(Angle1)
Angle1 = Angle1 - degree
dtd(i) = 0.01 'Minimum dimensionless time at which transient reaches boundary and fluid particles (at cp-boundary) attains some velocity
ti = dtd(i) * phi * visc * comp * (bx * by) / (0.000264 * perm) / 24  'real time step conversion from dimensionless time in days

Do     'Incrementing dtd(i) by dt and Calling recvel function at each time step till dimensionless time crosses td at which front is needed
Call welsys(dtd(i), xa(i), ya(i), thk, phi, bx, by, velx, vely)
If (Abs(velx) < Abs(vely)) Then
dt = stsize / Abs(vely)
Else
dt = stsize / Abs(velx)
End If
If (xa(i) > wx(1)) Then
Worksheets("Sheet4").Cells(30 + j, 3).ClearContents 'If conditions are met, erase that particle positions in excel sheet2 and goto next streamline
Worksheets("Sheet4").Cells(30 + j, 4).ClearContents
GoTo line10
End If
ti = ti + dt
'Increment time step and locate particle position till td is reached
xa(i + 1) = xa(i) + velx * dt
ya(i + 1) = ya(i) + vely * dt
i = i + 1
dtd(i) = ti * 24 * (0.000264 * perm) / (phi * visc * comp * (bx * by)) ' dimensionless time conversion back from real time
Loop Until (dtd(i) > td)

x(j) = xa(i) * Cos(angle2) - ya(i) * Sin(angle2)
y(j) = xa(i) * Sin(angle2) + ya(i) * Cos(angle2)

'Printing particles positions for each streamline at desired td
Worksheets("Sheet4").Cells(30 + j, 3).ClearContents
Set curCell = Worksheets("Sheet4").Cells(30 + j, 3)
curCell.Value = x(j)
Worksheets("Sheet4").Cells(30 + j, 4).ClearContents
Set curCell = Worksheets("Sheet4").Cells(30 + j, 4)
curCell.Value = y(j)
line10: Next j
For k = 1 To (ns - 1) / 2
area = area + (x(k + 1) - x(k)) * (2 * 708 - (y(k) + y(k + 1))) / 2
Next k
areaperc = ((708 ^ 2 - 2 * area) / 708 ^ 2) * 100
Worksheets("Sheet4").Cells(30, 6).ClearContents
Set curCell = Worksheets("Sheet4").Cells(30, 6)
curCell.Value = areaperc
End Sub

'This subroutine calculates the velocity components at a point (x,y) at an area based dimensionless time,td in a rectangle with width bx
'and length by having constant pressure boundaries
'*************************************************************************************************************************************

Sub welsys(td, x, y, thk, phi, bx, by, velx, vely)
Dim lx1, ly1, const1
velx3 = 0
vely3 = 0
const1 = 0.894 / thk / phi
ta = 1 / (4 * bx * by * td)

'A rectangle with all sides at constant pressure is analogous to four all-sides closed rectangles of one well each(2 productions and 2 injections)
'Length lx1 and ly1 of 4 closed rectangles is twice that of constant pressure system containing m wells.
'--------------------------------------------------------------------------------------------------------------
lx1 = 2 * bx
ly1 = 2 * by
'The loop calculates the new origins and location of well inside four rectangles with closed boundaries
'-----------------------------------------------------------------------------------------------------------------------------
dlx = wx(1)
dly = wy(1)
orgx = dlx - bx
orgy = dly - by
Call velimg(dlx, dly, x, y, ta, lx1, ly1, orgx, orgy, velx2, vely2)
velx3 = velx3 - const1 * q(1) * velx2
vely3 = vely3 - const1 * q(1) * vely2
dlx = -wx(1)
dly = wy(1)
orgx = dlx - bx
orgy = dly - by
Call velimg(dlx, dly, x, y, ta, lx1, ly1, orgx, orgy, velx2, vely2)
velx3 = velx3 - const1 * q(2) * velx2
vely3 = vely3 - const1 * q(2) * vely2
dlx = wx(1)
dly = 2 * by - wy(1)
orgx = dlx - bx
orgy = dly - by
Call velimg(dlx, dly, x, y, ta, lx1, ly1, orgx, orgy, velx2, vely2)
velx3 = velx3 - const1 * q(2) * velx2
vely3 = vely3 - const1 * q(2) * vely2
dlx = -wx(1)
dly = 2 * by - wy(1)
orgx = dlx - bx
orgy = dly - by
Call velimg(dlx, dly, x, y, ta, lx1, ly1, orgx, orgy, velx2, vely2)
velx = velx3 - const1 * q(1) * velx2
vely = vely3 - const1 * q(1) * vely2
End Sub


'This subroutine calculates the velocity components at a point (x,y) due to a well of coordinates (wlx,wly) at the center of a closed
'rectangle with origin (orgx,orgy), width lx1 and length ly1
'***************************************************************************************************************************************
Sub velimg(wlx, wly, x, y, ta, lx1, ly1, orgx, orgy, velx2, vely2)
Dim dx(4), dy(4), wl1, wl2, wl3, wl4, dm1, dm2, dm3, dm4, xds, rsq, exparg
velx2 = 0
vely2 = 0
k = 2
'Horizontal distances of four line of wells in each iteration from the point (x,y)
'-----------------------------------------------------------------------------------------------------------------------------------
line10:
wl1 = (k - 2) * lx1 + wlx
wl2 = 2 * orgx - wl1
wl3 = k * lx1 + 2 * orgx - wlx
wl4 = 2 * orgx - wl3
dx(1) = x - wl1
dx(2) = x - wl2
dx(3) = x - wl3
dx(4) = x - wl4

'For each lines of wells successively, superposition is done in groups of four wells per iteration in Y-direction
'---------------------------------------------------------------------------------------------------------------------------------
For i = 1 To 4
xds = dx(i) ^ 2
velx1 = 0
vely1 = 0
k1 = 2

line20:
dm1 = (k1 - 2) * ly1 + wly
dm2 = 2 * orgy - dm1
dm3 = k1 * ly1 + 2 * orgy - wly
dm4 = 2 * orgy - dm3
dy(1) = y - dm1
dy(2) = y - dm2
dy(3) = y - dm3
dy(4) = y - dm4

For j = 1 To 4
rsq = dy(j) ^ 2 + xds
exparg = rsq * ta
exp1 = 1
If (exparg > 25) Then
exp1 = 0
Else
exp1 = Exp(-exparg)
End If
velx1 = velx1 + exp1 * dx(i) / rsq
vely1 = vely1 + exp1 * dy(j) / rsq
Next j
k1 = k1 + 2
If (k1 < 8) Then GoTo line20
velx2 = velx2 + velx1
vely2 = vely2 + vely1
Next i
k = k + 2
If (k < 8) Then GoTo line10
End Sub


